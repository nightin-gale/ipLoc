package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
)

func readCsvFile(filePath string) [][]string {
	f, err := os.Open(filePath)
	if err != nil {
		log.Fatal("Unable to read input file "+filePath, err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	records, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal("Unable to parse file as CSV for "+filePath, err)
	}

	return records
}

func saveCsvFile(filePath string, record [][]string) error {
	f, err := os.OpenFile(filePath, os.O_RDWR|os.O_CREATE, 0755)
	if err != nil {
		log.Fatal("Fail to create" + filePath)
	}
	defer f.Close()

	csvWriter := csv.NewWriter(f)
	defer csvWriter.Flush()
	err = csvWriter.WriteAll(record)
	return err
}

func main() {
	var tmp [][]string = readCsvFile("./ipv4location.csv")
	// var tmp [][]string = readCsvFile("./dummy.csv")

	datafile, err := os.OpenFile("../data/data.go", os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		log.Fatal("Fail to create" + "../data/data.go")
	}
	defer datafile.Close()

	// write to data.go
	// header
	fmt.Fprintf(datafile, "// Generated By processData.go\n")
	fmt.Fprintf(datafile, "package data\n")

	fmt.Fprintf(datafile, "var Ipv4Ip = []uint64{\n")
	for _, record := range tmp {
		fmt.Fprintf(datafile, "%s,\n", record[0])
	}
	fmt.Fprintf(datafile, "}\n")

	fmt.Fprintf(datafile, "var Ipv4Data = []struct{Country [2]rune; Region string; City string}{\n")
	for _, record := range tmp {
		if record[1] != "-" {
			fmt.Fprintf(datafile, "{ Country: [2]rune{'%c','%c'}, Region: \"%s\", City: \"%s\"},\n", record[1][0], record[1][1], record[2], record[3])
		} else {
			fmt.Fprintf(datafile, "{ Country: [2]rune{'%c','%c'}, Region: \"%s\", City: \"%s\"},\n", record[1][0], record[1][0], record[2], record[3])
		}
	}
	fmt.Fprintf(datafile, "}\n")
}
